@using Project_PRN222_G5.DataAccess.DTOs
@{
    var items = ViewData["Items"] as IEnumerable<object>;
    var paging = ViewData["Paging"] as Paging;
    var request = ViewData["Request"] as PagedRequest;
    var displayProps = ViewData["DisplayProps"] as string[] ?? [];

    var sortField = request?.Sort;
    var sortOrder = request?.SortDir ?? "asc";
    var currentPage = request?.PageNumber ?? 1;
    var search = request?.Search ?? string.Empty;
}

<form method="get" class="mb-3">
    <input type="hidden" name="Sort" value="@sortField" />
    <input type="hidden" name="SortDir" value="@sortOrder" />
    <input type="hidden" name="PageNumber" value="@currentPage" />

    <div class="input-group">
        <input type="text"
               name="Search"
               value="@search"
               class="form-control"
               placeholder="Search..." />
        <button type="submit" class="btn btn-outline-primary">Search</button>
    </div>
</form>

@if (items == null || !items.Any())
{
    <div class="alert alert-info text-center">No data found.</div>
}
else
{
    var props = items.First().GetType().GetProperties().Where(p => displayProps.Contains(p.Name)).ToArray();

    <table class="table table-bordered table-hover table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    var isCurrentSort = prop.Name == sortField;
                    var nextOrder = isCurrentSort && sortOrder == "asc" ? "desc" : "asc";
                    <th>
                        <a asp-route-Sort="@prop.Name"
                           asp-route-SortDir="@nextOrder"
                           asp-route-PageNumber="@currentPage"
                           asp-route-Search="@search">
                            @prop.Name
                            @if (isCurrentSort)
                            {
                                <span>@(sortOrder == "asc" ? "▲" : "▼")</span>
                            }
                        </a>
                    </th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                var id = item.GetType().GetProperty("Id")?.GetValue(item);
                <tr>
                    @foreach (var prop in props)
                    {
                        <td>@(prop.GetValue(item))</td>
                    }
                    <td>
                        <a class="btn btn-sm btn-info" asp-page="Details" asp-route-id="@id">Detail</a>
                        <a class="btn btn-sm btn-warning" asp-page="Edit" asp-route-id="@id">Edit</a>
                        <a class="btn btn-sm btn-danger" asp-page="Delete" asp-route-id="@id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    if (paging is { TotalPage: > 1 })
    {
        const int visiblePages = 5;
        var startPage = Math.Max(1, paging.CurrentPage - visiblePages / 2);
        var endPage = Math.Min(paging.TotalPage, startPage + visiblePages - 1);
        if (endPage - startPage + 1 < visiblePages)
        {
            startPage = Math.Max(1, endPage - visiblePages + 1);
        }

        <nav aria-label="Pagination" class="mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item @(paging.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link" asp-route-PageNumber="@(paging.CurrentPage - 1)"
                       asp-route-Sort="@sortField"
                       asp-route-SortDir="@sortOrder"
                       asp-route-Search="@search">Previous</a>
                </li>

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-route-PageNumber="1"
                           asp-route-Sort="@sortField"
                           asp-route-SortDir="@sortOrder"
                           asp-route-Search="@search">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                }

                @for (var i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == paging.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-route-PageNumber="@i"
                           asp-route-Sort="@sortField"
                           asp-route-SortDir="@sortOrder"
                           asp-route-Search="@search">@i</a>
                    </li>
                }

                @if (endPage < paging.TotalPage)
                {
                    @if (endPage < paging.TotalPage - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                    <li class="page-item">
                        <a class="page-link" asp-route-PageNumber="@paging.TotalPage"
                           asp-route-Sort="@sortField"
                           asp-route-SortDir="@sortOrder"
                           asp-route-Search="@search">@paging.TotalPage</a>
                    </li>
                }

                <li class="page-item @(paging.HasNextPage ? "" : "disabled")">
                    <a class="page-link" asp-route-PageNumber="@(paging.CurrentPage + 1)"
                       asp-route-Sort="@sortField"
                       asp-route-SortDir="@sortOrder"
                       asp-route-Search="@search">Next</a>
                </li>
            </ul>
        </nav>
    }
}
